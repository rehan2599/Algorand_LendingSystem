/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"LendingContract","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolStats","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"requestLoan","args":[{"type":"uint64","name":"amount"},{"type":"string","name":"purpose"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"assessLoan","args":[{"type":"uint64","name":"creditScore"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLendingInfo","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[64,166,194,228,327],"errorMessage":"OnCompletion is not NoOp"},{"pc":[362],"errorMessage":"can only call when creating"},{"pc":[67,169,197,231,330],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiABASYBBBUffHUxG0EBUoIFBAK+zhEEvuvroQSKIVPgBB6SyTkEvK9y7DYaAI4FAQoApwCFAGkAA4EAQzEZFEQxGESAWhUffHUAVEFmZ2hhbiBDb21tdW5pdHkgTGVuZGluZzogU2VydmluZyA5NCUgdW5iYW5rZWQgcG9wdWxhdGlvbiB3aXRoIGJsb2NrY2hhaW4gdGVjaG5vbG9nebAiQzEZFEQxGEQ2GgEXiAFOSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBFzYaAlcCAIgA20kVFlcGAkxQKExQsCJDMRkURDEYRIBXFR98dQBRQWZnaGFuIExlbmRpbmcgUG9vbDogMTI1LDAwMCBBRk4gYXZhaWxhYmxlIHwgMjMgYWN0aXZlIGxvYW5zIHwgOTQuMiUgc3VjY2VzcyByYXRlsCJDMRkURDEYRDYaAVcCAIgAGUkVFlcGAkxQKExQsCJDMRlA/tMxGBREIkOKAQGAB0hlbGxvLCCL/1CALiEgV2VsY29tZSB0byBBZmdoYW4gQ29tbXVuaXR5IExlbmRpbmcgUGxhdGZvcm1QiYoCAYAbTG9hbiByZXF1ZXN0IHN1Ym1pdHRlZCBmb3Igi/9QgCogaW4gQWZnaGFuaXN0YW4uIEF3YWl0aW5nIEFJIGFzc2Vzc21lbnQuLi5QiYoBAYv/gYoFDUEAQ4BAQ29uZ3JhdHVsYXRpb25zISBMb2FuIGFwcHJvdmVkLiBTdXBwb3J0aW5nIEFmZ2hhbiBlbnRyZXByZW5ldXJzIYmAQUFzc2Vzc21lbnQgY29tcGxldGUuIEJ1aWxkaW5nIGZpbmFuY2lhbCBpbmNsdXNpb24gaW4gQWZnaGFuaXN0YW4uiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LendingContract contract
 */
export type LendingContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'getPoolStats()string': Record<string, never>
    'requestLoan(uint64,string)string': {
      amount: bigint | number
      purpose: string
    }
    'assessLoan(uint64)string': {
      creditScore: bigint | number
    }
    'getLendingInfo()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'getPoolStats()string': []
    'requestLoan(uint64,string)string': [amount: bigint | number, purpose: string]
    'assessLoan(uint64)string': [creditScore: bigint | number]
    'getLendingInfo()string': []
  }
}

/**
 * The return type for each method
 */
export type LendingContractReturns = {
  'hello(string)string': string
  'getPoolStats()string': string
  'requestLoan(uint64,string)string': string
  'assessLoan(uint64)string': string
  'getLendingInfo()string': string
}

/**
 * Defines the types of available calls and state of the LendingContract smart contract.
 */
export type LendingContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: LendingContractArgs['obj']['hello(string)string']
      argsTuple: LendingContractArgs['tuple']['hello(string)string']
      returns: LendingContractReturns['hello(string)string']
    }>
    & Record<'getPoolStats()string' | 'getPoolStats', {
      argsObj: LendingContractArgs['obj']['getPoolStats()string']
      argsTuple: LendingContractArgs['tuple']['getPoolStats()string']
      returns: LendingContractReturns['getPoolStats()string']
    }>
    & Record<'requestLoan(uint64,string)string' | 'requestLoan', {
      argsObj: LendingContractArgs['obj']['requestLoan(uint64,string)string']
      argsTuple: LendingContractArgs['tuple']['requestLoan(uint64,string)string']
      returns: LendingContractReturns['requestLoan(uint64,string)string']
    }>
    & Record<'assessLoan(uint64)string' | 'assessLoan', {
      argsObj: LendingContractArgs['obj']['assessLoan(uint64)string']
      argsTuple: LendingContractArgs['tuple']['assessLoan(uint64)string']
      returns: LendingContractReturns['assessLoan(uint64)string']
    }>
    & Record<'getLendingInfo()string' | 'getLendingInfo', {
      argsObj: LendingContractArgs['obj']['getLendingInfo()string']
      argsTuple: LendingContractArgs['tuple']['getLendingInfo()string']
      returns: LendingContractReturns['getLendingInfo()string']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type LendingContractSignatures = keyof LendingContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LendingContractNonVoidMethodSignatures = keyof LendingContractTypes['methods'] extends infer T ? T extends keyof LendingContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LendingContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LendingContractSignatures> = LendingContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LendingContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LendingContractSignatures> = LendingContractTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type LendingContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LendingContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LendingContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LendingContract smart contract
 */
export abstract class LendingContractParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<LendingContractArgs['obj']['hello(string)string'] | LendingContractArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<LendingContractArgs['obj']['getPoolStats()string'] | LendingContractArgs['tuple']['getPoolStats()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the requestLoan(uint64,string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestLoan(params: CallParams<LendingContractArgs['obj']['requestLoan(uint64,string)string'] | LendingContractArgs['tuple']['requestLoan(uint64,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'requestLoan(uint64,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.purpose],
    }
  }
  /**
   * Constructs a no op call for the assessLoan(uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assessLoan(params: CallParams<LendingContractArgs['obj']['assessLoan(uint64)string'] | LendingContractArgs['tuple']['assessLoan(uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assessLoan(uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.creditScore],
    }
  }
  /**
   * Constructs a no op call for the getLendingInfo()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLendingInfo(params: CallParams<LendingContractArgs['obj']['getLendingInfo()string'] | LendingContractArgs['tuple']['getLendingInfo()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLendingInfo()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LendingContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LendingContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LendingContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LendingContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LendingContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LendingContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LendingContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LendingContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LendingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LendingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LendingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LendingContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LendingContract smart contract
 */
export class LendingContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LendingContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LendingContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LendingContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LendingContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LendingContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LendingContractClient> {
    return new LendingContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LendingContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LendingContractClient> {
    return new LendingContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the LendingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LendingContract smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<LendingContractArgs['obj']['hello(string)string'] | LendingContractArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LendingContractParamsFactory.hello(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `getPoolStats()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<LendingContractArgs['obj']['getPoolStats()string'] | LendingContractArgs['tuple']['getPoolStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LendingContractParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `requestLoan(uint64,string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestLoan: (params: CallParams<LendingContractArgs['obj']['requestLoan(uint64,string)string'] | LendingContractArgs['tuple']['requestLoan(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LendingContractParamsFactory.requestLoan(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `assessLoan(uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assessLoan: (params: CallParams<LendingContractArgs['obj']['assessLoan(uint64)string'] | LendingContractArgs['tuple']['assessLoan(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LendingContractParamsFactory.assessLoan(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `getLendingInfo()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLendingInfo: (params: CallParams<LendingContractArgs['obj']['getLendingInfo()string'] | LendingContractArgs['tuple']['getLendingInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LendingContractParamsFactory.getLendingInfo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the LendingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LendingContract smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<LendingContractArgs['obj']['hello(string)string'] | LendingContractArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LendingContractParamsFactory.hello(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `getPoolStats()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<LendingContractArgs['obj']['getPoolStats()string'] | LendingContractArgs['tuple']['getPoolStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LendingContractParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `requestLoan(uint64,string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestLoan: (params: CallParams<LendingContractArgs['obj']['requestLoan(uint64,string)string'] | LendingContractArgs['tuple']['requestLoan(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LendingContractParamsFactory.requestLoan(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `assessLoan(uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assessLoan: (params: CallParams<LendingContractArgs['obj']['assessLoan(uint64)string'] | LendingContractArgs['tuple']['assessLoan(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LendingContractParamsFactory.assessLoan(params))
    },

    /**
     * Makes a call to the LendingContract smart contract using the `getLendingInfo()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLendingInfo: (params: CallParams<LendingContractArgs['obj']['getLendingInfo()string'] | LendingContractArgs['tuple']['getLendingInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LendingContractParamsFactory.getLendingInfo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the LendingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LendingContract smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<LendingContractArgs['obj']['hello(string)string'] | LendingContractArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LendingContractParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | LendingContractReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the LendingContract smart contract using the `getPoolStats()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<LendingContractArgs['obj']['getPoolStats()string'] | LendingContractArgs['tuple']['getPoolStats()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LendingContractParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | LendingContractReturns['getPoolStats()string'])}
    },

    /**
     * Makes a call to the LendingContract smart contract using the `requestLoan(uint64,string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestLoan: async (params: CallParams<LendingContractArgs['obj']['requestLoan(uint64,string)string'] | LendingContractArgs['tuple']['requestLoan(uint64,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LendingContractParamsFactory.requestLoan(params))
      return {...result, return: result.return as unknown as (undefined | LendingContractReturns['requestLoan(uint64,string)string'])}
    },

    /**
     * Makes a call to the LendingContract smart contract using the `assessLoan(uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assessLoan: async (params: CallParams<LendingContractArgs['obj']['assessLoan(uint64)string'] | LendingContractArgs['tuple']['assessLoan(uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LendingContractParamsFactory.assessLoan(params))
      return {...result, return: result.return as unknown as (undefined | LendingContractReturns['assessLoan(uint64)string'])}
    },

    /**
     * Makes a call to the LendingContract smart contract using the `getLendingInfo()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLendingInfo: async (params: CallParams<LendingContractArgs['obj']['getLendingInfo()string'] | LendingContractArgs['tuple']['getLendingInfo()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LendingContractParamsFactory.getLendingInfo(params))
      return {...result, return: result.return as unknown as (undefined | LendingContractReturns['getLendingInfo()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LendingContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LendingContract app
   */
  state = {
  }

  public newGroup(): LendingContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the LendingContract contract
       */
      hello(params: CallParams<LendingContractArgs['obj']['hello(string)string'] | LendingContractArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a getPoolStats()string method call against the LendingContract contract
       */
      getPoolStats(params: CallParams<LendingContractArgs['obj']['getPoolStats()string'] | LendingContractArgs['tuple']['getPoolStats()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats()string', v))
        return this
      },
      /**
       * Add a requestLoan(uint64,string)string method call against the LendingContract contract
       */
      requestLoan(params: CallParams<LendingContractArgs['obj']['requestLoan(uint64,string)string'] | LendingContractArgs['tuple']['requestLoan(uint64,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestLoan(params)))
        resultMappers.push((v) => client.decodeReturnValue('requestLoan(uint64,string)string', v))
        return this
      },
      /**
       * Add a assessLoan(uint64)string method call against the LendingContract contract
       */
      assessLoan(params: CallParams<LendingContractArgs['obj']['assessLoan(uint64)string'] | LendingContractArgs['tuple']['assessLoan(uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assessLoan(params)))
        resultMappers.push((v) => client.decodeReturnValue('assessLoan(uint64)string', v))
        return this
      },
      /**
       * Add a getLendingInfo()string method call against the LendingContract contract
       */
      getLendingInfo(params: CallParams<LendingContractArgs['obj']['getLendingInfo()string'] | LendingContractArgs['tuple']['getLendingInfo()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLendingInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLendingInfo()string', v))
        return this
      },
      /**
       * Add a clear state call to the LendingContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LendingContractComposer
  }
}
export type LendingContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<LendingContractArgs['obj']['hello(string)string'] | LendingContractArgs['tuple']['hello(string)string']>): LendingContractComposer<[...TReturns, LendingContractReturns['hello(string)string'] | undefined]>

  /**
   * Calls the getPoolStats()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<LendingContractArgs['obj']['getPoolStats()string'] | LendingContractArgs['tuple']['getPoolStats()string']>): LendingContractComposer<[...TReturns, LendingContractReturns['getPoolStats()string'] | undefined]>

  /**
   * Calls the requestLoan(uint64,string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestLoan(params?: CallParams<LendingContractArgs['obj']['requestLoan(uint64,string)string'] | LendingContractArgs['tuple']['requestLoan(uint64,string)string']>): LendingContractComposer<[...TReturns, LendingContractReturns['requestLoan(uint64,string)string'] | undefined]>

  /**
   * Calls the assessLoan(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assessLoan(params?: CallParams<LendingContractArgs['obj']['assessLoan(uint64)string'] | LendingContractArgs['tuple']['assessLoan(uint64)string']>): LendingContractComposer<[...TReturns, LendingContractReturns['assessLoan(uint64)string'] | undefined]>

  /**
   * Calls the getLendingInfo()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLendingInfo(params?: CallParams<LendingContractArgs['obj']['getLendingInfo()string'] | LendingContractArgs['tuple']['getLendingInfo()string']>): LendingContractComposer<[...TReturns, LendingContractReturns['getLendingInfo()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the LendingContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LendingContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LendingContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LendingContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LendingContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LendingContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LendingContractComposerResults<TReturns>>
}
export type LendingContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

